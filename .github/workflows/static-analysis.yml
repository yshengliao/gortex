name: Static Analysis

on:
  push:
    branches: [ main, master, develop ]
  pull_request:
    branches: [ main, master, develop ]

permissions:
  contents: read
  pull-requests: write

jobs:
  context-check:
    name: Context Propagation Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install dependencies
      run: |
        go mod download
        go mod verify

    - name: Build context checker
      run: go build -o bin/contextcheck ./internal/analyzer/cmd/contextcheck

    - name: Run context propagation check
      id: context_check
      run: |
        echo "## Context Propagation Analysis Results" > context-check-report.md
        echo "" >> context-check-report.md
        
        # Run the checker and capture output
        if ./bin/contextcheck ./... 2>&1 | tee -a context-check-output.txt; then
          echo "✅ All context propagation checks passed!" >> context-check-report.md
          echo "STATUS=success" >> $GITHUB_OUTPUT
        else
          echo "❌ Context propagation issues found:" >> context-check-report.md
          echo '```' >> context-check-report.md
          cat context-check-output.txt >> context-check-report.md
          echo '```' >> context-check-report.md
          echo "STATUS=failure" >> $GITHUB_OUTPUT
        fi

    - name: Upload analysis report
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: context-check-report
        path: |
          context-check-report.md
          context-check-output.txt

    - name: Comment PR with results
      if: github.event_name == 'pull_request' && always()
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('context-check-report.md', 'utf8');
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Context Propagation Analysis Results')
          );
          
          const commentBody = `${report}\n\n<sub>Generated by Context Checker CI - ${new Date().toISOString()}</sub>`;
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: commentBody
            });
          }

    - name: Fail if context issues found
      if: steps.context_check.outputs.STATUS == 'failure'
      run: |
        echo "::error::Context propagation issues detected. Please fix the issues reported above."
        exit 1

  golangci-lint:
    name: Go Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run golangci-lint
      uses: golangci/golangci-lint-action@v6
      with:
        version: latest
        args: --timeout=5m --config=.golangci.yml

  go-vet:
    name: Go Vet
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Run go vet
      run: |
        echo "Running go vet on all packages..."
        go vet ./...

  go-fmt:
    name: Go Format Check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Check go fmt
      run: |
        if [ -n "$(gofmt -l .)" ]; then
          echo "The following files need formatting:"
          gofmt -l .
          echo ""
          echo "Please run 'go fmt ./...' to format your code"
          exit 1
        fi
        echo "All files are properly formatted"

  security-check:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Gosec Security Scanner
      uses: securego/gosec@master
      with:
        args: '-no-fail -fmt sarif -out gosec-results.sarif ./...'

    - name: Upload SARIF file
      uses: github/codeql-action/upload-sarif@v3
      if: always()
      with:
        sarif_file: gosec-results.sarif