name: Performance Regression Tests

on:
  pull_request:
    branches: [ main, master, develop ]
    paths:
      - '**.go'
      - 'go.mod'
      - 'go.sum'
      - '.github/workflows/benchmark.yml'

permissions:
  contents: read
  pull-requests: write
  issues: write

jobs:
  benchmark:
    name: Run Benchmarks
    runs-on: ubuntu-latest
    steps:
    - name: Checkout PR branch
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Set up Go
      uses: actions/setup-go@v5
      with:
        go-version-file: 'go.mod'
        cache: true

    - name: Install benchstat
      run: go install golang.org/x/perf/cmd/benchstat@latest

    - name: Checkout base branch
      run: |
        git fetch origin ${{ github.base_ref }}
        git checkout origin/${{ github.base_ref }}

    - name: Run base benchmarks
      run: |
        go test -bench=. -benchmem -count=10 -timeout=30m ./... > base.txt 2>&1 || true
        echo "Base branch benchmarks completed"

    - name: Checkout PR branch
      run: |
        git checkout ${{ github.sha }}

    - name: Run PR benchmarks
      run: |
        go test -bench=. -benchmem -count=10 -timeout=30m ./... > pr.txt 2>&1 || true
        echo "PR branch benchmarks completed"

    - name: Compare benchmarks
      id: benchstat
      run: |
        echo "## üìä Performance Comparison Report" > benchmark-report.md
        echo "" >> benchmark-report.md
        echo "Comparing base branch (\`${{ github.base_ref }}\`) with PR branch (\`${{ github.head_ref || github.ref_name }}\`)" >> benchmark-report.md
        echo "" >> benchmark-report.md
        
        # Run benchstat and capture output
        benchstat base.txt pr.txt > comparison.txt 2>&1 || true
        
        # Check for significant regressions
        REGRESSION_FOUND=false
        
        # Parse benchstat output for significant changes
        while IFS= read -r line; do
          # Check for performance regression indicators (>10% slower)
          if echo "$line" | grep -E "\+[1-9][0-9]\.[0-9]+%" > /dev/null; then
            percentage=$(echo "$line" | grep -oE "\+[0-9]+\.[0-9]+%" | tr -d '+%')
            if (( $(echo "$percentage > 10" | bc -l) )); then
              REGRESSION_FOUND=true
            fi
          fi
        done < comparison.txt
        
        # Format the report
        echo '```' >> benchmark-report.md
        cat comparison.txt >> benchmark-report.md
        echo '```' >> benchmark-report.md
        echo "" >> benchmark-report.md
        
        # Add interpretation guide
        echo "### üìñ How to Read This Report" >> benchmark-report.md
        echo "" >> benchmark-report.md
        echo "- **Negative percentages** (e.g., \`-10.5%\`) indicate **improvements** üéâ" >> benchmark-report.md
        echo "- **Positive percentages** (e.g., \`+15.2%\`) indicate **regressions** ‚ö†Ô∏è" >> benchmark-report.md
        echo "- **\`~\`** indicates no statistically significant change" >> benchmark-report.md
        echo "- **\`?\`** indicates uncertain results (high variance)" >> benchmark-report.md
        echo "" >> benchmark-report.md
        
        # Add status summary
        if [ "$REGRESSION_FOUND" = true ]; then
          echo "### ‚ö†Ô∏è Performance Regression Detected" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "This PR introduces performance regressions greater than 10%. Please review the changes and optimize if necessary." >> benchmark-report.md
          echo "STATUS=failed" >> $GITHUB_OUTPUT
        else
          echo "### ‚úÖ Performance Check Passed" >> benchmark-report.md
          echo "" >> benchmark-report.md
          echo "No significant performance regressions detected (threshold: 10%)." >> benchmark-report.md
          echo "STATUS=passed" >> $GITHUB_OUTPUT
        fi
        
        # Add raw benchmark files for detailed analysis
        echo "" >> benchmark-report.md
        echo "<details>" >> benchmark-report.md
        echo "<summary>üìã Raw Benchmark Results</summary>" >> benchmark-report.md
        echo "" >> benchmark-report.md
        echo "### Base Branch Results" >> benchmark-report.md
        echo '```' >> benchmark-report.md
        head -50 base.txt >> benchmark-report.md
        echo '```' >> benchmark-report.md
        echo "" >> benchmark-report.md
        echo "### PR Branch Results" >> benchmark-report.md
        echo '```' >> benchmark-report.md
        head -50 pr.txt >> benchmark-report.md
        echo '```' >> benchmark-report.md
        echo "</details>" >> benchmark-report.md

    - name: Comment on PR
      uses: actions/github-script@v7
      if: github.event_name == 'pull_request'
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          const report = fs.readFileSync('benchmark-report.md', 'utf8');
          
          // Find existing comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('Performance Comparison Report')
          );
          
          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: report
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: report
            });
          }

    - name: Upload benchmark results
      uses: actions/upload-artifact@v4
      with:
        name: benchmark-results
        path: |
          base.txt
          pr.txt
          comparison.txt
          benchmark-report.md

    - name: Fail if regression found
      if: steps.benchstat.outputs.STATUS == 'failed'
      run: |
        echo "‚ùå Performance regression detected. Please optimize your changes."
        exit 1